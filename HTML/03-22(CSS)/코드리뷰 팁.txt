스크린리더가 읽을 필요는 없지만  마크업 구조상 필요한 경우
헤딩 제목이 필요하다 (article이나 section 등)

1. 요소와 요소 사이에 간격은 가장 가깝게 있는 컨테이너 끼리 줘야함
예를 들어 header옆에 main 있다면 그 사이에 마진을 넣어야함
main안의 section에 마진을 넣으면 마진병합 현상이 일어남

2. 마진을 쓸 때는 요소와 요소사이의 여백을 줌
3. 패딩은 어떤 요소안에 공간을 주기위해 쓴다.
-> 마진 병합 현상 줄이기

4. text-align : center로 된다면 flex를 쓰지 않아도 됨.
flex 속성의 단점은 반드시 컨테이너와 자식 요소가 있어야됨
(이 때문에 코드가 늘어나는 경우는 안좋음)

5. 대체텍스트, alt는 주체가 명확해야 함.

6. 닫기 버튼의 포커스 순서는 마크업 구조상 최하단에 가있는게 좋음
(탐색 순서 및 내용 파악을 할 수 있게 하기 위해)

7. input은 반드시 설명하는 레이블이 있어야함

8. 로그인 버튼은 제출을 해야 되기때문에 type="submit"로 줌

9. 버튼 타입의 디폴트 값은 submit임 그래서 다른 용도라면 타입을 명시해야함

10. 아이디 비밀번호 로그인은 제출용이기때문에 form으로 감싸야함

11. input은 열린태그여서 자식을 포함할 수 없음. 하지만 타입마다 가상요소를 쓸수 있거나 없을 수도 있음.

12. required 속성은 필수 속성이라는 것을 강조

13. ) 같은 문자가 빨간색나온다면 특수기호로 처리

14. ul li에서 li가 최소 3개 이상 일때 쓰는게 좋음

15. h1은 컨텐츠에서 포함하는 가장 상위 제목

16. strong은 강하게 강조할 때 쓴다. p태그보다 강조하고 싶을 때

17. 각 섹션마다 h1, h2, h3로 구체적인 제목을 적어야함.

18. label은 input을 설명하는 요소다.

19. 사용자의 인터랙션이 가능한 요소들끼리 부모 자식으로 엮어선 안됨
(a태그 안의 버튼 같은 경우 html이 무엇을 눌렀는지 애매하게 인식함)

20. x버튼 같은 작은 버튼은 사용자 편의성을 위해 크기를 키운다.

21. 높이 값을 고정하는 대신 패딩을 넣어서 유연하게 ui를 구현하는 버릇이 필요함

22. a태그의 href="#none" 를 하면 id=none인 곳으로 이동하겠다는 의미로 깜박거림이 없어짐
/ 혹은 javascript:void(0)를 넣으면 아무것도 처리하지 않겠다라는 의미로도 사용 가능하다.

23. 되도록이면 속성을 축약해서 사용

24. h태그는 순서대로 작성해야한다. h1 - h2 - h3 - ... (마크업의 헤딩 구조가 좋지 않음)
* HeadingsMap : Page의 헤딩 구조를 볼 수 있는 크롬 확장 프로그램 

25. 큰 프로젝트에서는 여러 재사용성이 있는 모듈들을 한페이지에 작성하고 가져다 쓰는 방식으로 많이 쓴다.

26. <fieldset> 태그는 <form> 요소에서 연관된 요소들을 하나의 그룹으로 묶을 때 사용함

27. form validation : 유효성 검사 -> id나 pw에 required 넣는 등

28. 사용자 편의성을 위해, 체크박스 누를 때 스페이스바로 눌러지게 함

29. unset으로 css속성 다 없애버리기 가능

30. 같은 레벨에 헤딩요소는 하나만

31. inline-block은 상하좌우 길이를 주면서 inline요소처럼 나란히 줄수 있음