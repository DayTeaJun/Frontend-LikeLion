마틴이 클린코드에서 주장한 원칙 5개(solid)
SRP : 단일 책임 원칙(각 클래스(또는 모듈, 오브젝트)는 하나의 정보만 가지게 만들어야 한다)
OCP : 개방 폐쇠 원칙(확장에는 열려 있으며, 변경에는 닫혀 있어야 한다)
LSP : 리스코프 치환 원칙(인터페이스의 서브타이핑은 인터페이스에 정의된 형태를 최대한 유지)
ISP : 인터페이스 분리 원칙(인터페이스는 최소한으로 유지)
DIP : 의존 관계 역전 원칙(상위 레벨의 모듈이나 인터페이스가 서브 클래스나 타이핑에 영향을 받아서는 안된다)

---

개발자들이 가장 많이 사용하는 개발 원칙
KISS : 최대한 단순함을 유지하라
DRY : 똑같은 기능, 코드를 반복하지 마라
YAGNI : 그 기능이 필요하기 전까지는 미리 만들지 마라

---

클린소프트웨어 - 악취
경직성 : 프로그램 변경이 어렵다. 원하는 곳만 변경하면 장애가 난다.
취약성 : 프로그램 변경시 아무런 연관이 없는 부분에서 장애 발생
부동성 : 재사용할 수 있는 컴포넌트로 구분이 어려움
점착성 : 개발 환경이 비효율적
불필요한 복잡성 : 직접 효용이 없는 구조가 디자인에 포함
불필요한 반복 : 단일 추상 개념으로 통합할 수 있는 반복구조 포함
불투명성 : 직접 만든 사람이 아닌 다른 사람이 코드를 읽고 이해하기 힘들다

작은 효율성에 대해서는, 말하자면 97% 정도에 대해서는 잊어버려라. 섣부른 최적화는 모든 악의 근원이다. - 도널드 커누스

패스트캠퍼스 CTO님
1. 일단 동작하게 만든 다음 더 좋게 만들어라
2. 언제나 발견했을 때보다 깨끗하게 해놓고 캠핑장을 떠나라
3. 바퀴를 새로 발명하는 일의 좋은 점은 둥근 바퀴를 얻을 수 있다는 점입니다.

취업 시즌(3~4월, 8~9월)

3~4월, 8~9월
국가지원 사업 * 직원을 몇 명이상 채용하는 사업기간(*들어 갈 확률이 있지만, 자신이 원하는 회사로 갈지는 그 때 봐야함)
지역주도형 청년일자리 사업 추가모집 선정기업 공고